{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","id","name","email","className","src","alt","CardList","robots","cardComponent","map","user","i","key","Scroll","style","overflowY","border","height","children","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","console","log","color","onClick","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1085ce75.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = (props) => {\r\n    const { id, name, email } = props;\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\" />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    var cardComponent = robots.map((user, i) => {\r\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />;\r\n    })\r\n    return(\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n    <div style={{overflowY: 'scroll', border:'1px solid black', height: '500px'}}>\r\n        {props.children}\r\n    </div>);\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\" placeholder=\"search robots\"\r\n                onChange={searchChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Ooops.. this is not good.</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if(this.state.count !== nextState.count) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        } \r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return {count: state.count + 1}\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log('CounterButton');\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>\r\n                Count: {this.state.count}\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CounterButton;\r\n","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     return false;\r\n    // }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <CounterButton color={'red'} />\r\n                <h1>RoboFriends</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;\r\n\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport SearchBox from '../components/SearchBox';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport Header from '../components/Header';\r\nimport {setSearchField, requestRobots} from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    componentDidMount(){\r\n      this.props.onRequestRobots();\r\n    }\r\n    render() {\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n        if(isPending)\r\n        {\r\n            return <h1>Loading</h1>;\r\n        }\r\n        else\r\n        {\r\n            return  <div className=\"tc\">\r\n                <Header />\r\n                <SearchBox searchChange={onSearchChange} />\r\n                <Scroll><ErrorBoundary><CardList robots={filteredRobots} /></ErrorBoundary></Scroll>\r\n            </div>;\r\n        }\r\n    } \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED \r\n} from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\r\n\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED \r\n} from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider, connect} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots, requestRobots} from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\n//const store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}